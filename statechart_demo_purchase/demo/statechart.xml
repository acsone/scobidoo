<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright 2016 ACSONE SA/NV
     License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl). -->

<odoo noupdate="1">

    <record model="statechart" id="purchase_order_statechart_demo">
        <field name="name">purchase.order</field>
        <field name="model_ids" eval="[(4, ref('purchase.model_purchase_order'))]"/>
        <field name="yaml">
statechart:
  name: purchase.order
  root state:
    name: root
    initial: draft
    transitions:
      - event: do_nothing
        # this a no-op event
      - event: button_draft
        # we can disable a standard Odoo method by adding a guard
        guard: False
      - event: compute_something
        # a transition that returns a value
        action: |
          event._return = 'something'
      - event: unlink
        # unlink test
        action: |
          o.state = 'cancel'
          o.unlink.origin(o)
      - event: raise_user_error
        action: |
          o.raise_user_error.origin(o)
    states:
      - name: draft
        on exit: |
          # we can do actions upon exiting a state
          o.notes = 'Congrats for exiting the draft state'
        transitions:
          - event: button_confirm
            target: confirmed
            action: |
              # TODO this is not a very nice way to invoke the origin method
              o.button_confirm.origin(o, *event.args, **event.kwargs)
          - event: check_write
      - name: not draft
        transitions:
          - event: check_write
            guard: |
              # and put some guard on the write methods, eg to
              # allow writeing selected fields only depending on state
              not (set(event.args[0].keys()) - set(['state', 'sc_state', 'notes', 'group_id']))
        states:
          - name: confirmed
            transitions:
              - event: button_cancel
                target: draft
                action: |
                  # here we change the std Odoo behaviour by resetting to draft at once
                  o.button_cancel.origin(o)
                  o.button_draft.origin(o)
              - target: approved
                # this is an eventless transition, it triggers automatically
                # if the guard is satified
                guard: o.amount_total &lt; 1000
                action: |
                  o.button_approve.origin(o)
              - event: button_approve
                # example guard that checks group membership
                guard: |
                  o.env.user.id == 1 or \
                    o.env.user.has_group('purchase.purchase_manager')
                target: approved
                action: |
                  o.button_approve.origin(o)
          - name: approved
            on entry: |
              # we can do actions upon entering a state
              o.notes = 'Congrats for entering the approved state'
        </field>
    </record>

    <record model="statechart" id="statechart_grandparent_demo">
        <field name="name">test.inherit.grand.parent</field>
        <field name="model_ids" eval="[(4, ref('statechart_demo_purchase.model_test_inherit_grand_parent'))]"/>
        <field name="yaml">
statechart:
  name: test.inherit.grand.parent
  root state:
    name: root
    initial: draft
    states:
      - name: draft
        transitions:
          - event: button_grand_parent
        </field>
    </record>

    <record model="statechart" id="statechart_child2_demo">
        <field name="name">test.inherit.child2</field>
        <field name="model_ids" eval="[(4, ref('statechart_demo_purchase.model_test_inherit_child2'))]"/>
        <field name="yaml">
statechart:
  name: test.inherit.child2
  root state:
    name: root
    initial: draft
    states:
      - name: draft
        transitions:
          - event: button_child2
        </field>
    </record>
</odoo>
